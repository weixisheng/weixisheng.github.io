(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{381:function(t,s,e){t.exports=e.p+"assets/img/Vue-1.3437ac81.jpg"},427:function(t,s,e){"use strict";e.r(s);var a=e(25),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"基于数据劫持双向绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于数据劫持双向绑定"}},[t._v("#")]),t._v(" 基于数据劫持双向绑定")]),t._v(" "),a("ul",[a("li",[t._v("利用"),a("code",[t._v("Proxy")]),t._v("或"),a("code",[t._v("Object.defineProperty")]),t._v("生成的"),a("code",[t._v("Observer")]),t._v("对对象、对象属性进行劫持，在属性变化后通知订阅者"),a("code",[t._v("Watcher")])]),t._v(" "),a("li",[t._v("解析器"),a("code",[t._v("Compiler")]),t._v("解析模板中的指令，收集指令需要的数据和方法，等待数据变化时重新渲染")]),t._v(" "),a("li",[a("code",[t._v("Watcher")]),t._v("连接"),a("code",[t._v("Observer")]),t._v("和"),a("code",[t._v("Watcher")]),t._v("，接收"),a("code",[t._v("Observer")]),t._v("产生的数据变化，并根据"),a("code",[t._v("Compiler")]),t._v("提供的指令进行视图渲染，促使视图变化\n"),a("img",{attrs:{src:e(381),alt:"Vue 双向绑定思路"}})])]),t._v(" "),a("p",[t._v("Vue 3开始使用"),a("code",[t._v("Proxy")]),t._v("实现双向绑定，因为"),a("code",[t._v("Object.defineProperty")]),t._v("有如下缺点：")]),t._v(" "),a("ol",[a("li",[t._v("不能实现数组和对象的部分监听情况。无法监听数组下标的变化，导致Vue实现数组变异方法来解决问题。无法监听属性的新增删除操作，需要"),a("code",[t._v("Vue.set")]),t._v("。")]),t._v(" "),a("li",[t._v("需要遍历所有的属性，如果 vue 对象的 "),a("code",[t._v("data/computed/props")]),t._v(" 数据多，遍历自然会慢很多。\n那么 "),a("code",[t._v("Object.defineProperty")]),t._v(" 需要监听所有的属性的变化，占用内存相应就大了。")])]),t._v(" "),a("p",[t._v("Proxy直接拦截/代理对象，不需深度遍历属性，而且支持监听数组变化。")]),t._v(" "),a("h2",{attrs:{id:"computed工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed工作流程"}},[t._v("#")]),t._v(" computed工作流程")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      message"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  computed"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reversedMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("ol",[a("li",[a("code",[t._v("data")]),t._v(" 属性初始化 "),a("code",[t._v("getter")]),t._v(" "),a("code",[t._v("setter")])]),t._v(" "),a("li",[a("code",[t._v("computed")]),t._v(" 计算属性初始化，提供的函数将用作属性 "),a("code",[t._v("vm.reversedMessage")]),t._v(" 的 "),a("code",[t._v("getter")])]),t._v(" "),a("li",[t._v("当首次获取 "),a("code",[t._v("reversedMessage")]),t._v(" 计算属性的值时，"),a("code",[t._v("Dep")]),t._v(" 开始依赖收集")]),t._v(" "),a("li",[t._v("在执行 "),a("code",[t._v("message")]),t._v(" "),a("code",[t._v("getter")]),t._v(" 方法时，如果 "),a("code",[t._v("Dep")]),t._v(" 处于依赖收集状态，则判定 "),a("code",[t._v("message")]),t._v(" 为 "),a("code",[t._v("reversedMessage")]),t._v(" 的依赖，并建立依赖关系")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("message")]),t._v(" 发生变化时，根据依赖关系，触发 "),a("code",[t._v("reversedMessage")]),t._v(" 的重新计算")])]),t._v(" "),a("h2",{attrs:{id:"watch原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch原理"}},[t._v("#")]),t._v(" watch原理")]),t._v(" "),a("p",[a("code",[t._v("watch")]),t._v(" 监听实现利用遍历获取属性，触发“数据劫持get”逐个收集依赖，这样做的好处是其上级的属性发生修改也能执行回调。")]),t._v(" "),a("p",[t._v("与 "),a("code",[t._v("data")]),t._v(" 和 "),a("code",[t._v("computed")]),t._v(" 不同，"),a("strong",[a("code",[t._v("watch")]),t._v(" 收集依赖的流程是发生在页面渲染之前")]),t._v("，而前两者是在页面渲染时进行取值才会收集依赖。")]),t._v(" "),a("p",[a("code",[t._v("computed")]),t._v(" 和 "),a("code",[t._v("watch")]),t._v(" 的异同：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("computed")]),t._v(" 要依赖 "),a("code",[t._v("data")]),t._v(" 上的属性变化返回一个值，watch 则是观察数据触发回调；")]),t._v(" "),a("li",[a("code",[t._v("computed")]),t._v(" 和 "),a("code",[t._v("watch")]),t._v(" 依赖收集的发生点不同；")]),t._v(" "),a("li",[a("code",[t._v("computed")]),t._v(" 的更新需要“渲染Watcher”的辅助，watch 不需要。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);